#!/bin/bash

###
# usbkey-ctl
# USB Key based SSH key management
#
# DEPENDENCIES
# 'keychain' : For the ssh-agent management that will ensure all shells for the 
#              same user will share an ssh-agent.
#            [Keychain project]: https://www.funtoo.org/Keychain
# AUTHORS
#   Steven Davis <sgdavis@bioneos.com> 
#   Bio::Neos, Inc. <http://bioneos.com/>
#
# LICENSE
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Constants
debug=0
mount_point=/tmp/usbkey
usbkey_root=".usbkey"
usbkey_keyfile="$usbkey_root/key"
# Key lifespan (in minutes)
timeout=720

# Get the target username (running X)
# NOTE: This could fail if there is more than a single session running...
logger -t usbkey "Executing 'usbkey-ctl $1' for $(whoami) [$2]"
supported_sessions="xfce4-session|gnome-session|lxsession|kded4|cinnamon-session"
user=`ps -A -o user,comm |grep -E "(?${supported_sessions})"| awk '{print $1}'`
eval userhome=$(printf "~%q" $user)

# Necessary for running
mkdir -p ${mount_point}

# Determine operating mode
case "$1" in
  # Process when usbkey is removed:
  # 1) Find the running X desktop
  # 2) lock screen (desktop specific)
  # 3) clear all keys from ssh-agent
  removed)
    # Determine what desktop we are looking at
    check_gnome=$(ps -aux | awk '{print $11}' | grep gnome-session)
    if [[ -n $check_gnome ]]; then
      desktop=gnome
      sessionid=`/bin/loginctl list-sessions | grep ${user} | awk '{print $1}'`
    fi
    check_cinnamon=$(ps -aux | awk '{print $11}' | grep cinnamon-session)
    check_lxde=$(ps -aux | awk '{print $11}' | grep lxsession)
    check_xfce=$(ps -aux | awk '{print $11}' | grep xfce4-session)
    check_kde=$(ps -aux | awk '{print $11}' | grep kded4)
    if [[ -n $check_cinnamon ]]; then
      desktop=cinnamon
    elif [[ -n $check_lxde ]]; then
      desktop=lxde
    elif [[ -n $check_xfce ]]; then
      desktop=xfce
    elif [[ -n $check_kde ]]; then
      desktop=kde
    fi
    if [ $debug -eq 1 ]; then 
      logger -t usbkey "[DEBUG] Locking screen for $user [Desktop: $desktop]..."
    fi

    # Lock the screen appropriately
    if [ -n ${user} -a -n ${desktop} -a $debug -eq 0 ]
    then
      case $desktop in
        gnome)
          /bin/loginctl lock-session $sessionid
        ;;
        cinnamon)
          /bin/su ${user} -c "DISPLAY=:0 /usr/bin/cinnamon-screensaver-command -a"
        ;;
        xfce)
          /bin/su ${user} -c "DISPLAY=:0 /usr/bin/xflock4"
        ;;
        lxde | kde)
          /bin/su ${user} -c "DISPLAY=:0 /usr/bin/xscreensaver-command -lock"
        ;;
      esac
    fi

    # Clear out the ssh-agent keys
    logger -t usbkey "Removing all SSH identities from the agent for ${user}..."
    /bin/su - ${user} -c "ssh-add -D" 
  ;;
  # Process to when usbkey is inserted:
  # 1) find user running the current X session (above)
  # 2) mount usbkey media
  # 3) decrypt LUKS device 
  #   If successful:
  # 4) mount decrypted image
  # 5) add all keys from decrypted image
  # 6) umount decrypted image
  # 7) close LUKS device
  # 8) unmount / eject usbkey
  inserted)
    # Mount usbkey media
    mount /dev/$2 ${mount_point}
    # Decrypt the LUKS image using the keyfile
    cryptsetup open --type luks --key-file $userhome/$usbkey_keyfile ${mount_point}/linux.img usbkey

    # Unlock only if a successful decryption occurred
    if [ -b /dev/mapper/usbkey ]
    then
      # Begin SSH key management
      logger -t usbkey "Found approved usbkey for ${user}..."
      # Open and mount the LUKS device
      logger -t usbkey "Mounting encrypted device..."
      mount /dev/mapper/usbkey ${mount_point}/image
      # Read and store all SSH keys
      for key in `ls ${mount_point}/image/*_rsa`
      do
        logger -t usbkey "Adding SSH identity '$key' for '$user' [${timeout} min limit]..."
        /bin/su - ${user} -c "keychain -q --timeout ${timeout} ${key}"
        if [ $debug -eq 1 ]; then
          logger -t usbkey "[DEBUG] cmd: 'keychain -q --timeout ${timeout} ${key}'"
          eval_out=`/bin/su - ${user} -c "keychain --eval"`
          logger -t usbkey "[DEBUG] keychain eval: $eval_out"
          ident_out=`/bin/su - ${user} -c "ssh-add -l" | tr '\n' ';'`
          logger -t usbkey "[DEBUG] ssh-agent identities: $ident_out"
        fi
      done
      # Unmount and close the LUKS device
      logger -t usbkey "Unmounting / closing encrypted device..."
      umount ${mount_point}/image
      cryptsetup close usbkey
    else
      logger -t usbkey "USBkey device inserted, but keyfile for ${user} failed to decrypt!!"
    fi
    
    # For additional safety, this device will be ejected if the root of the
    # user has a file named EJECT present in 'usbkey_root'. Delete this file
    # if you need to operate on the USB device for some reason.
    if [ -f "$userhome/$usbkey_root/EJECT" ]; then
      # Unmount temp mount point
      umount ${mount_point}
      # Eject device (also prevents automount by file manager)
      # NOTE: we are assuming the device name will be consistent to current
      #   naming as a kernel device (sdXY)
      device=$(echo $2| cut -c 1-3)
      logger -t usbkey "Ejecting ${device}..."
      eject $2
    fi
  ;;
esac
